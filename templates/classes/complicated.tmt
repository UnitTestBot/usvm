~class org.owasp.benchmark.helpers._Fuzz_C_BaseClass start~
package org.owasp.benchmark.helpers;

public class _Fuzz_C_BaseClass<T> {
   public T ClassCall(T l, T r) {
      return null;
   }
}

~class org.owasp.benchmark.helpers._Fuzz_C_BaseClass end~

~class org.owasp.benchmark.helpers._Fuzz_C_Interface start~
package org.owasp.benchmark.helpers;

public interface _Fuzz_C_Interface<T> {
   default T InterfaceCall(T l, T r) {
     return null;
   };
}

~class org.owasp.benchmark.helpers._Fuzz_C_Interface end~

~class org.owasp.benchmark.helpers._Fuzz_C_InterfaceA start~
package org.owasp.benchmark.helpers;

public interface _Fuzz_C_InterfaceA<T> {
   T InterfaceACall(T t);
}

~class org.owasp.benchmark.helpers._Fuzz_C_InterfaceA end~


~class org.owasp.benchmark.helpers._Fuzz_C_ExtendsImplements start~
package org.owasp.benchmark.helpers;

public class _Fuzz_C_ExtendsImplements<T> extends _Fuzz_C_BaseClass<T> implements _Fuzz_C_Interface<T> {
   @Override
   public T ClassCall(T l, T r) {
      return l;
   }

   @Override
   public T InterfaceCall(T l, T r) {
      return r;
   }
}

~class org.owasp.benchmark.helpers._Fuzz_C_ExtendsImplements end~

~class org.owasp.benchmark.helpers._Fuzz_C_DoubleImplements start~
package org.owasp.benchmark.helpers;

public class _Fuzz_C_DoubleImplements<T> implements _Fuzz_C_Interface<T>, _Fuzz_C_InterfaceA<T> {
   @Override
   public T InterfaceCall(T l, T r) {
      return l;
   }

   @Override
   public T InterfaceACall(T t) {
      return t;
   }
}

~class org.owasp.benchmark.helpers._Fuzz_C_DoubleImplements end~

~class org.owasp.benchmark.helpers._Fuzz_C_ClassA start~
package org.owasp.benchmark.helpers;

public class _Fuzz_C_ClassA<T> extends _Fuzz_C_BaseClass<T> {
   @Override
   public T ClassCall(T l, T r) {
       return l;
   }
}

~class org.owasp.benchmark.helpers._Fuzz_C_ClassA end~

~class org.owasp.benchmark.helpers._Fuzz_C_ClassB start~
package org.owasp.benchmark.helpers;

public class _Fuzz_C_ClassB<T> extends _Fuzz_C_ClassA<T> {
}

~class org.owasp.benchmark.helpers._Fuzz_C_ClassB end~

~class org.owasp.benchmark.helpers._Fuzz_C_ClassC start~
package org.owasp.benchmark.helpers;

public class _Fuzz_C_ClassC<T> extends _Fuzz_C_ClassB<T> {
   @Override
   public T ClassCall(T l, T r) {
       return r;
   }
}

~class org.owasp.benchmark.helpers._Fuzz_C_ClassC end~

~class org.owasp.benchmark.helpers._Fuzz_C_ClassD start~
package org.owasp.benchmark.helpers;

public final class _Fuzz_C_ClassD<T> extends _Fuzz_C_ClassB<T> {
   @Override
   public T ClassCall(T l, T r) {
       return super.ClassCall(l, r);
   }
}

~class org.owasp.benchmark.helpers._Fuzz_C_ClassD end~

~main class start~
~import org.owasp.benchmark.helpers._Fuzz_C_BaseClass;~
~import org.owasp.benchmark.helpers._Fuzz_C_Interface;~
~import org.owasp.benchmark.helpers._Fuzz_C_ExtendsImplements;~
~import org.owasp.benchmark.helpers._Fuzz_C_DoubleImplements;~
~import org.owasp.benchmark.helpers._Fuzz_C_ClassA;~
~import org.owasp.benchmark.helpers._Fuzz_C_ClassB;~
~import org.owasp.benchmark.helpers._Fuzz_C_ClassC;~
~import org.owasp.benchmark.helpers._Fuzz_C_ClassD;~
~import java.util.*;~

~template start~
_Fuzz_C_ExtendsImplements<~[TYPE@1]~> dc = new _Fuzz_C_ExtendsImplements<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.ClassCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~[VAR_TYPE@1]~ = dc.InterfaceCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_DoubleImplements<~[TYPE@1]~> dc = new _Fuzz_C_DoubleImplements<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.InterfaceCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_DoubleImplements<~[TYPE@1]~> dc = new _Fuzz_C_DoubleImplements<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.InterfaceACall(~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_ClassA<~[TYPE@1]~> dc = new _Fuzz_C_ClassA<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.ClassCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_ClassA<~[TYPE@1]~> dc = new _Fuzz_C_ClassB<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.ClassCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_ClassA<~[TYPE@1]~> dc = new _Fuzz_C_ClassC<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.ClassCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_ClassB<~[TYPE@1]~> dc = new _Fuzz_C_ClassB<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.ClassCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_ClassB<~[TYPE@1]~> dc = new _Fuzz_C_ClassC<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.ClassCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_ClassC<~[TYPE@1]~> dc = new _Fuzz_C_ClassC<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.ClassCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~template start~
_Fuzz_C_ClassD<~[TYPE@1]~> dc = new _Fuzz_C_ClassD<~[TYPE@1]~>();
~[VAR_TYPE@1]~ = dc.ClassCall(~[EXPR_TYPE@1]~, ~[EXPR_TYPE@1]~);
~template end~

~main class end~
