~main class start~
~import java.util.*;~
~template start~
Map<String, String> map89458 = new HashMap<>();
map89458.put(~[EXPR_String]~, "");
map89458.put(~[EXPR_String]~, ~[EXPR_String]~);
map89458.put(~[EXPR_String]~, ~[VAR_String]~);
String value32632 = map89458.getOrDefault(~[EXPR_String]~, "");
if (!value32632.equals("")){
  ~[VAR_String]~ = value32632;
}
~template end~
~template start~
Map<String, String> map89458 = new HashMap<>();
String var274523 = ~[EXPR_String]~;
map89458.put(var274523, "");
map89458.put(var274523, ~[EXPR_String]~);
String value32632 = map89458.getOrDefault(~[EXPR_String]~, "");
if (map89458.containsValue(value32632)){
  ~[VAR_String]~ = value32632;
}
~template end~
~template start~
Map<String, String> map2 = new HashMap<>();
Map<String, String> anotherMap = new HashMap<>();
anotherMap.put(~[EXPR_String]~, ~[EXPR_String]~);
map2.putAll(anotherMap);
String value2 = map2.getOrDefault(~[EXPR_String]~, "");
if (!value2.equals("")){
  ~[VAR_String]~ = value2;
}
~template end~
~template start~
Map<String, String> map3 = new HashMap<>();
map3.putIfAbsent(~[EXPR_String]~, ~[EXPR_String]~);
String value3 = map3.getOrDefault(~[EXPR_String]~, "");
if (!value3.equals("")){
  ~[VAR_String]~ = value3;
}
~template end~
~template start~
Map<String, String> map4 = new HashMap<>();
map4.put(~[EXPR_String]~, ~[EXPR_String]~);
String value4 = map4.get(~[EXPR_String]~);
if (value4 != null && !value4.equals("")){
  ~[VAR_String]~ = value4;
}
~template end~
~template start~
Map<String, String> map5 = new HashMap<>();
map5.put(~[EXPR_String]~, ~[EXPR_String]~);
String value5 = map5.remove(~[EXPR_String]~);
if (value5 != null && !value5.equals("")){
  ~[VAR_String]~ = value5;
}
~template end~
~template start~
Map<String, String> map6 = new HashMap<>();
map6.put(~[EXPR_String]~, ~[EXPR_String]~);
if (map6.containsKey(~[EXPR_String]~)){
  ~[VAR_String]~ = map6.get(~[EXPR_String]~);
}
~template end~
~template start~
Map<String, String> map7 = new HashMap<>();
String theKey12312 = ~[EXPR_String]~;
map7.put(theKey12312, ~[EXPR_String]~);
if (map7.containsValue(~[EXPR_String]~)){
  ~[VAR_String]~ = theKey12312;
}
~template end~
~template start~
Map<String, String> map8 = new HashMap<>();
map8.put(~[EXPR_String]~, ~[EXPR_String]~);
map8.replace(~[EXPR_String]~, ~[EXPR_String]~);
String value8 = map8.getOrDefault(~[EXPR_String]~, "");
if (!value8.equals("")){
  ~[VAR_String]~ = value8;
}
~template end~
~template start~
Map<String, String> map9 = new HashMap<>();
map9.put(~[EXPR_String]~, ~[EXPR_String]~);
map9.replace(~[EXPR_String]~, ~[EXPR_String]~, ~[EXPR_String]~);
String value9 = map9.getOrDefault(~[EXPR_String]~, "");
if (!value9.equals("")){
  ~[VAR_String]~ = value9;
}
~template end~
~template start~
Map<String, String> map10 = new HashMap<>();
map10.put(~[EXPR_String]~, ~[EXPR_String]~);
int size10 = map10.size();
if (size10 > 0){
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<String, String> map11 = new HashMap<>();
map11.put(~[EXPR_String]~, ~[EXPR_String]~);
if (!map11.isEmpty()){
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<String, String> map12 = new HashMap<>();
map12.put(~[EXPR_String]~, ~[EXPR_String]~);
map12.clear();
if (map12.isEmpty()){
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<String, String> map13 = new HashMap<>();
map13.put(~[EXPR_String]~, ~[EXPR_String]~);
Set<String> keys = map13.keySet();
for (String key : keys) {
  ~[VAR_String]~ = key;
}
~template end~
~template start~
Map<String, String> map15 = new HashMap<>();
map15.put(~[EXPR_String]~, ~[EXPR_String]~);
Set<Map.Entry<String, String>> entries = map15.entrySet();
for (Map.Entry<String, String> entry : entries) {
  ~[VAR_String]~ = entry.getKey();
  ~[VAR_String]~ = entry.getValue();
}
~template end~
~template start~
Map<Integer, String> map12341 = new HashMap<>();
map12341.put(1, "value1");
map12341.compute(1, (key, value) -> ~[EXPR_String]~);
if (map12341.containsValue(~[EXPR_String]~)) {
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<Integer, String> map12341 = new HashMap<>();
map12341.put(1, "value1");
map12341.compute(1, (key, value) -> "");
if (map12341.containsValue("")) {
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<Integer, String> map12341 = new HashMap<>();
map12341.computeIfAbsent(1, k -> "defaultValue");
if (map12341.containsKey(1)) {
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<Integer, String> map12341 = new HashMap<>();
map12341.put(1, "value1");
map12341.computeIfPresent(1, (key, value) -> value + " updated");
if (map12341.containsValue("value1 updated")) {
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<Integer, String> map12341 = new HashMap<>();
map12341.put(1, "value1");
Map<Integer, String> anotherMap = new HashMap<>();
anotherMap.put(1, "value1");
if (map12341.equals(anotherMap)) {
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<Integer, String> map12341 = new HashMap<>();
map12341.put(1, "value1");
final String pampam = param;
map12341.forEach((key, value) -> value = pampam);
if (map12341.containsKey(1)) {
  ~[VAR_String]~ = map12341.get(1);
}
~template end~
~template start~
~template end~
~template start~
Map<Integer, String> map12341 = new HashMap<>();
map12341.put(1, "value1");
map12341.merge(1, "newValue", String::concat);
if (map12341.containsValue("value1newValue")) {
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~template start~
Map<Integer, String> map12341 = new HashMap<>();
map12341.put(1, "value1");
map12341.replaceAll((key, value) -> value + " updated");
if (map12341.containsValue("value1 updated")) {
  ~[VAR_String]~ = ~[EXPR_String]~;
}
~template end~
~main class end~
