~class org.owasp.benchmark.helpers._Fuzz_CustomExecutor start~
package org.owasp.benchmark.helpers;
import java.util.concurrent.*;

public class _Fuzz_CustomExecutor implements Executor {
   @Override
   public void execute(Runnable r) {
       r.run();
   }
}

~class org.owasp.benchmark.helpers._Fuzz_CustomExecutor end~

~class org.owasp.benchmark.helpers._Fuzz_Wrapper start~
package org.owasp.benchmark.helpers;

public class _Fuzz_Wrapper<T> {
   public _Fuzz_Wrapper(T t) {
     i = t;
   }
   public T i;
}

~class org.owasp.benchmark.helpers._Fuzz_Wrapper end~

~class org.owasp.benchmark.helpers._Fuzz_WrapperLambda start~
package org.owasp.benchmark.helpers;

public interface _Fuzz_WrapperLambda<T> {
   public void Mutate(_Fuzz_Wrapper<T> w);
}

~class org.owasp.benchmark.helpers._Fuzz_WrapperLambda end~

~class org.owasp.benchmark.helpers._Fuzz_NullTask start~
package org.owasp.benchmark.helpers;
import java.lang.Runnable;

public class _Fuzz_NullTask<T> implements Runnable {
    public _Fuzz_NullTask(_Fuzz_Wrapper<T> t) {
       wrapper = t;
    }

    _Fuzz_Wrapper<T> wrapper;

    @Override
    public void run() {
        wrapper.i = null;
    }
}
~class org.owasp.benchmark.helpers._Fuzz_NullTask end~

~class org.owasp.benchmark.helpers._Fuzz_LatchWorker start~
package org.owasp.benchmark.helpers;
import java.util.concurrent.*;
import java.util.List;

public class _Fuzz_LatchWorker<T> implements Runnable {
    private List<T> outputScraper;
    T element;
    private CountDownLatch countDownLatch;

    public _Fuzz_LatchWorker(List<T> outputScraper, CountDownLatch countDownLatch, T element) {
        this.outputScraper = outputScraper;
        this.element = element;
        this.countDownLatch = countDownLatch;
    }

    @Override
    public void run() {
        outputScraper.add(element);
        countDownLatch.countDown();
    }
}
~class org.owasp.benchmark.helpers._Fuzz_LatchWorker end~

~class org.owasp.benchmark.helpers._Fuzz_LambdaTask start~
package org.owasp.benchmark.helpers;
import java.util.concurrent.*;

public class _Fuzz_LambdaTask<T> implements Runnable {
    public _Fuzz_LambdaTask(_Fuzz_Wrapper<T> t, _Fuzz_WrapperLambda<T> l) {
       wrapper = t;
       lambda = l;
    }
    _Fuzz_Wrapper<T> wrapper;
    _Fuzz_WrapperLambda<T> lambda;

    @Override
    public void run() {
       lambda.Mutate(wrapper);
    }
}
~class org.owasp.benchmark.helpers._Fuzz_LambdaTask end~

~class org.owasp.benchmark.helpers._Fuzz_Unsynchronized start~
package org.owasp.benchmark.helpers;
import java.util.concurrent.*;

public class _Fuzz_Unsynchronized<T> {
  T a;
  T b;

  public void SetA(T value) {
    a = value;
  }

  public T GetA() {
    return a;
  }

  public void SetB(T value) {
    b = value;
  }

  public T GetB() {
    return b;
  }
}

~class org.owasp.benchmark.helpers._Fuzz_Unsynchronized end~

~class org.owasp.benchmark.helpers._Fuzz_Synchronized start~
package org.owasp.benchmark.helpers;
import java.util.concurrent.*;

public class _Fuzz_Synchronized<T> {
  T a;
  T b;

  public synchronized void SetA(T value) {
    a = value;
  }

  public synchronized T GetA() {
    return a;
  }

  public synchronized void SetB(T value) {
    b = value;
  }

  public synchronized T GetB() {
    return b;
  }
}

~class org.owasp.benchmark.helpers._Fuzz_Synchronized end~

~main class start~
~import org.owasp.benchmark.helpers._Fuzz_Wrapper;~
~import org.owasp.benchmark.helpers._Fuzz_WrapperLambda;~
~import org.owasp.benchmark.helpers._Fuzz_CustomExecutor;~
~import org.owasp.benchmark.helpers._Fuzz_NullTask;~
~import org.owasp.benchmark.helpers._Fuzz_LambdaTask;~
~import org.owasp.benchmark.helpers._Fuzz_LatchWorker;~
~import org.owasp.benchmark.helpers._Fuzz_Synchronized;~
~import org.owasp.benchmark.helpers._Fuzz_Unsynchronized;~

~import java.util.concurrent.*;~
~import java.util.stream.Stream;~
~import java.util.stream.Collectors;~
~import java.util.*;~

~template start~
Executor executor = new _Fuzz_CustomExecutor();
executor.execute(() -> {
});
~template end~

~template start~
_Fuzz_Wrapper<~[TYPE@1]~> wrapper = new _Fuzz_Wrapper<~[TYPE@1]~>(~[VAR_TYPE@1]~);
Executor executor = new _Fuzz_CustomExecutor();
executor.execute(() -> {
  wrapper.i = ~[EXPR_TYPE@1]~;
});
~[VAR_TYPE@1]~ = wrapper.i;
~template end~

~template start~
_Fuzz_Wrapper<~[TYPE@1]~> wrapper = new _Fuzz_Wrapper<~[TYPE@1]~>(~[VAR_TYPE@1]~);
_Fuzz_NullTask<~[TYPE@1]~> task = new _Fuzz_NullTask<~[TYPE@1]~>(wrapper);
Executor executor = new _Fuzz_CustomExecutor();
executor.execute(task);
~[VAR_TYPE@1]~ = wrapper.i;
~template end~

~template start~
_Fuzz_Wrapper<~[TYPE@1]~> wrapper = new _Fuzz_Wrapper<~[TYPE@1]~>(~[VAR_TYPE@1]~);
_Fuzz_WrapperLambda<~[TYPE@1]~> lambda = (w) -> { w.i = ~[EXPR_TYPE@1]~; };
_Fuzz_LambdaTask<~[TYPE@1]~> task = new _Fuzz_LambdaTask<~[TYPE@1]~>(wrapper, lambda);
Executor executor = new _Fuzz_CustomExecutor();
executor.execute(task);
~[VAR_TYPE@1]~ = wrapper.i;
~template end~

~template start~
_Fuzz_Wrapper<~[TYPE@1]~> wrapper = new _Fuzz_Wrapper<~[TYPE@1]~>(~[VAR_TYPE@1]~);
_Fuzz_WrapperLambda<~[TYPE@1]~> lambda = (w) -> { w.i = null; };
_Fuzz_LambdaTask<~[TYPE@1]~> task = new _Fuzz_LambdaTask<~[TYPE@1]~>(wrapper, lambda);
Executor executor = new _Fuzz_CustomExecutor();
executor.execute(task);
~[VAR_TYPE@1]~ = wrapper.i;
~template end~

~template start~
_Fuzz_Wrapper<~[TYPE@1]~> wrapper = new _Fuzz_Wrapper<~[TYPE@1]~>(~[VAR_TYPE@1]~);
_Fuzz_NullTask<~[TYPE@1]~> task = new _Fuzz_NullTask<~[TYPE@1]~>(wrapper);
ExecutorService executor = Executors.newFixedThreadPool(4);
executor.submit(task);
~[VAR_TYPE@1]~ = wrapper.i;
~template end~

~template start~
_Fuzz_Wrapper<~[TYPE@1]~> wrapper = new _Fuzz_Wrapper<~[TYPE@1]~>(~[VAR_TYPE@1]~);
_Fuzz_WrapperLambda<~[TYPE@1]~> lambda = (w) -> { w.i = ~[EXPR_TYPE@1]~; };
_Fuzz_LambdaTask<~[TYPE@1]~> task = new _Fuzz_LambdaTask<~[TYPE@1]~>(wrapper, lambda);
ExecutorService executor = Executors.newFixedThreadPool(4);
executor.submit(task);
~[VAR_TYPE@1]~ = wrapper.i;
~template end~

~template start~
_Fuzz_Wrapper<~[TYPE@1]~> wrapper = new _Fuzz_Wrapper<~[TYPE@1]~>(~[VAR_TYPE@1]~);
_Fuzz_WrapperLambda<~[TYPE@1]~> lambda = (w) -> { w.i = null; };
_Fuzz_LambdaTask<~[TYPE@1]~> task = new _Fuzz_LambdaTask<~[TYPE@1]~>(wrapper, lambda);
ExecutorService executor = Executors.newFixedThreadPool(4);
executor.submit(task);
~[VAR_TYPE@1]~ = wrapper.i;
~template end~

~template start~
ExecutorService executor = Executors.newFixedThreadPool(4);

Future<~[TYPE@1]~> future = executor.submit(() -> {
    return ~[EXPR_TYPE@1]~;
});

try {
  ~[VAR_TYPE@1]~ = future.get(2, TimeUnit.SECONDS);
} catch (InterruptedException | ExecutionException | TimeoutException e) {
}

~template end~

~template start~
List<~[TYPE@1]~> outputScraper = Collections.synchronizedList(new ArrayList<~[TYPE@1]~>());
CountDownLatch countDownLatch = new CountDownLatch(5);
List<Thread> workers = Stream.generate(() -> new Thread(new _Fuzz_LatchWorker(outputScraper, countDownLatch, ~[EXPR_TYPE@1]~))).limit(5).collect(Collectors.toList());

  workers.forEach(Thread::start);
  try {
    countDownLatch.await();
  } catch (Throwable e) {
  }

  ~[VAR_TYPE@1]~ = outputScraper.get(0);
~template end~

~template start~
List<~[TYPE@1]~> outputScraper = Collections.synchronizedList(new ArrayList<~[TYPE@1]~>());
CountDownLatch countDownLatch = new CountDownLatch(5);
List<Thread> workers = Stream.generate(() -> new Thread(new _Fuzz_LatchWorker(outputScraper, countDownLatch, ~[EXPR_TYPE@1]~))).limit(5).collect(Collectors.toList());

  workers.forEach(Thread::start);
  try {
    countDownLatch.await();
  } catch (Throwable e) {
  }

  ~[VAR_TYPE@1]~ = outputScraper.get(0);
~template end~

~template start~
List<~[TYPE@1]~> outputScraper = Collections.synchronizedList(new ArrayList<~[TYPE@1]~>());
CountDownLatch countDownLatch = new CountDownLatch(5);
List<Thread> workers = Stream.generate(() -> new Thread(new _Fuzz_LatchWorker(outputScraper, countDownLatch, ~[EXPR_TYPE@1]~))).limit(5).collect(Collectors.toList());

  workers.forEach(Thread::start);
  try {
    countDownLatch.await();
  } catch (Throwable e) {
  }

  outputScraper.set(0, null);
  ~[VAR_TYPE@1]~ = outputScraper.get(0);
~template end~

~template start~
List<~[TYPE@1]~> outputScraper = Collections.synchronizedList(new ArrayList<~[TYPE@1]~>());
CountDownLatch countDownLatch = new CountDownLatch(5);
List<Thread> workers = Stream.generate(() -> new Thread(new _Fuzz_LatchWorker(outputScraper, countDownLatch, ~[EXPR_TYPE@1]~))).limit(5).collect(Collectors.toList());

  workers.forEach(Thread::start);

  outputScraper.set(0, null);
  ~[VAR_TYPE@1]~ = outputScraper.get(0);
~template end~

~template start~
  Semaphore semaphore = new Semaphore(1);
  try {
    semaphore.acquire();
    ~[VAR_TYPE@1]~ = ~[EXPR_TYPE@1]~;
    semaphore.release();
  } catch (Throwable e) {
  }
~template end~

~template start~
  Semaphore semaphore = new Semaphore(1);
  try {
    semaphore.acquire();
    semaphore.acquire();
    ~[VAR_TYPE@1]~ = ~[EXPR_TYPE@1]~;
    semaphore.release();
    semaphore.release();
  } catch (Throwable e) {
  }
~template end~

~template start~
  Semaphore semaphore = new Semaphore(10);
  try {
    semaphore.acquire();
    semaphore.acquire();
    ~[VAR_TYPE@1]~ = ~[EXPR_TYPE@1]~;
    semaphore.release();
    semaphore.release();
  } catch (Throwable e) {
  }
~template end~

~template start~
LinkedBlockingQueue<~[TYPE@1]~> blockingQueue = new LinkedBlockingQueue<>();
try {
  blockingQueue.put(~[EXPR_TYPE@1]~);
  ~[VAR_TYPE@1]~ = blockingQueue.take();
} catch (Throwable e) {
}
~template end~

~template start~
LinkedBlockingQueue<~[TYPE@1]~> blockingQueue = new LinkedBlockingQueue<>(1);
try {
  blockingQueue.put(~[EXPR_TYPE@1]~);
  ~[VAR_TYPE@1]~ = blockingQueue.take();
} catch (Throwable e) {
}
~template end~

~template start~
LinkedBlockingQueue<~[TYPE@1]~> blockingQueue = new LinkedBlockingQueue<>(1);
try {
  blockingQueue.put(~[EXPR_TYPE@1]~);
  blockingQueue.put(~[EXPR_TYPE@1]~);
  ~[VAR_TYPE@1]~ = blockingQueue.take();
} catch (Throwable e) {
}
~template end~

~template start~
LinkedBlockingQueue<~[TYPE@1]~> blockingQueue = new LinkedBlockingQueue<>(1);
try {
  ~[VAR_TYPE@1]~ = blockingQueue.take();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<~[TYPE@1]~> future = CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~);
try {
  ~[VAR_TYPE@1]~ = future.get();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<~[TYPE@1]~> future = CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~).handle((s, t) -> s != null ? s : ~[EXPR_TYPE@1]~);
try {
  ~[VAR_TYPE@1]~ = future.get();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<~[TYPE@1]~> future = CompletableFuture.supplyAsync(() -> {throw new RuntimeException("");}).handle((s, t) -> ~[EXPR_TYPE@1]~);
try {
  ~[VAR_TYPE@1]~ = future.get();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<~[TYPE@1]~> just = CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~);
CompletableFuture<~[TYPE@1]~> then = just.thenApply(s -> ~[EXPR_Boolean]~ ? s : ~[EXPR_TYPE@1]~);
try {
  ~[VAR_TYPE@1]~ = then.get();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<~[TYPE@1]~> future = CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~).thenCompose(s -> CompletableFuture.supplyAsync(() -> s));
try {
  ~[VAR_TYPE@1]~ = future.get();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<~[TYPE@1]~> future = CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~).thenCompose(s -> CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~));
try {
  ~[VAR_TYPE@1]~ = future.get();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<~[TYPE@1]~> future = CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~).thenCombine(CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~), (s1, s2) -> ~[EXPR_Boolean]~ ? s1 : s2);
try {
  ~[VAR_TYPE@1]~ = future.get();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<~[TYPE@1]~> a = CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~);
CompletableFuture<~[TYPE@1]~> b = CompletableFuture.supplyAsync(() -> ~[EXPR_TYPE@1]~);
CompletableFuture<Void> combined = CompletableFuture.allOf(a, b);

try {
  combined.get();
  ~[VAR_TYPE@1]~ = a.get();
} catch (Throwable e) {
}
~template end~

~template start~
CompletableFuture<String> a = CompletableFuture.supplyAsync(() -> ~[EXPR_String]~);
CompletableFuture<String> b = CompletableFuture.supplyAsync(() -> ~[EXPR_String]~);
try {
  ~[VAR_TYPE@1]~ = Stream.of(a, b).map(CompletableFuture::join).collect(Collectors.joining(" "));
} catch (Throwable e) {
}
~template end~

~template start~
ExecutorService executor = Executors.newFixedThreadPool(4);
_Fuzz_Unsynchronized<~[TYPE@1]~> unsync = new _Fuzz_Unsynchronized<~[TYPE@1]~>();

Future<~[TYPE@1]~> first = executor.submit(() -> {
  unsync.SetA(~[EXPR_TYPE@1]~);
  return unsync.GetB();
});

Future<~[TYPE@1]~> second = executor.submit(() -> {
  unsync.SetB(~[EXPR_TYPE@1]~);
  return unsync.GetA();
});

try {
  ~[VAR_TYPE@1]~ = first.get(2, TimeUnit.SECONDS);
  ~[VAR_TYPE@1]~ = second.get(2, TimeUnit.SECONDS);
} catch (InterruptedException | ExecutionException | TimeoutException e) {
}

~template end~

~template start~
ExecutorService executor = Executors.newFixedThreadPool(4);
_Fuzz_Synchronized<~[TYPE@1]~> sync = new _Fuzz_Synchronized<~[TYPE@1]~>();

Future<~[TYPE@1]~> first = executor.submit(() -> {
  sync.SetA(~[EXPR_TYPE@1]~);
  return sync.GetB();
});

Future<~[TYPE@1]~> second = executor.submit(() -> {
  sync.SetB(~[EXPR_TYPE@1]~);
  return sync.GetA();
});

try {
  ~[VAR_TYPE@1]~ = first.get(2, TimeUnit.SECONDS);
  ~[VAR_TYPE@1]~ = second.get(2, TimeUnit.SECONDS);
} catch (InterruptedException | ExecutionException | TimeoutException e) {
}

~template end~

~main class end~
