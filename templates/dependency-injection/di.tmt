~class org.owasp.benchmark.helpers.DependencyInjection start~
package org.owasp.benchmark.helpers;

import org.springframework.context.annotation.Bean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

@Configuration
public class DependencyInjection {
    public interface Service {
        String execute();
    }

    public class ServiceImpl implements Service {
        private String value;

        public ServiceImpl(String value) {
            this.value = value;
        }

        public String execute() {
            return "";
        }
    }

    public interface ServiceFactory {
        Service create();
    }

    public class ServiceFactoryImpl implements ServiceFactory {
        @Autowired
        private Service value;

        public Service create() {
            return this.value;
        }
    }

    @Bean
    public Service myService() {
        return new ServiceImpl("");
    }
}
~class org.owasp.benchmark.helpers.DependencyInjection end~
~main class start~
~import org.owasp.benchmark.helpers.DependencyInjection;~
~import org.springframework.context.ApplicationContext;~
~import org.springframework.context.annotation.AnnotationConfigApplicationContext;~
~import java.util.*;~
~template start~
ApplicationContext context =
        new AnnotationConfigApplicationContext(DependencyInjection.class);
DependencyInjection.Service service = context.getBean(DependencyInjection.Service.class);
~[VAR_String]~ = service.execute();
~template end~
~template start~
ApplicationContext context =
        new AnnotationConfigApplicationContext(DependencyInjection.class);
DependencyInjection.ServiceFactory serviceFactory = context.getBean(DependencyInjection.ServiceFactory.class);
~[VAR_String]~ = serviceFactory.create().execute();
~template end~
~main class end~
