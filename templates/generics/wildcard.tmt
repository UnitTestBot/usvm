~class org.owasp.benchmark.helpers.generics.SimpleGenericClass start~
package org.owasp.benchmark.helpers.generics;

public class SimpleGenericClass<T> {
    private T value;

    public SimpleGenericClass(T value) {
        this.value = value;
    }

    public T getValue() {
        return value;
    }
}
~class org.owasp.benchmark.helpers.generics.SimpleGenericClass end~
~class org.owasp.benchmark.helpers.generics.SubGenericClass start~
package org.owasp.benchmark.helpers.generics;

public class SubGenericClass<T> extends SimpleGenericClass<T> {
    public SubGenericClass(T value) {
       super(value);
    }
}
~class org.owasp.benchmark.helpers.generics.SubGenericClass end~
~main class start~
~import org.owasp.benchmark.helpers.generics.*;~
~import java.util.*;~
~template start~
~function handleGenericClassWildcard start~
public Object handleGenericClassWildcard(SimpleGenericClass<?> genericClassObj) {
    Object obj = genericClassObj.getValue();
    if (obj instanceof String) {
        return "";
    } else {
        return obj;
    }
}
~function handleGenericClassWildcard end~

~[TYPE@1]~ genericObj = ~[EXPR_TYPE@1]~;
SimpleGenericClass<~[TYPE@1]~> obj = new SimpleGenericClass<>(genericObj);
~[VAR_TYPE@1]~ = (~[TYPE@1]~) handleGenericClassWildcard(obj);
~template end~
~template start~
~function handleGenericClassWildcard start~
public Object handleGenericClassWildcard(SimpleGenericClass<?> genericClassObj) {
    if (genericClassObj instanceof SubGenericClass<?>) {
        return "";
    } else {
        return genericClassObj.getValue();
    }
}
~function handleGenericClassWildcard end~

~[TYPE@1]~ genericObj = ~[EXPR_TYPE@1]~;
SimpleGenericClass<~[TYPE@1]~> obj = new SimpleGenericClass<>(genericObj);
~[VAR_TYPE@1]~ = (~[TYPE@1]~) handleGenericClassWildcard(obj);
~template end~
~template start~
~function handleGenericClassWildcard start~
public Object handleGenericClassWildcard(SimpleGenericClass<?> genericClassObj) {
    if (genericClassObj instanceof SubGenericClass<?>) {
        return "";
    } else {
        return genericClassObj.getValue();
    }
}
~function handleGenericClassWildcard end~

~[TYPE@1]~ genericObj = ~[EXPR_TYPE@1]~;
SimpleGenericClass<~[TYPE@1]~> obj = new SubGenericClass<>(genericObj);
~[VAR_TYPE@1]~ = (~[TYPE@1]~) handleGenericClassWildcard(obj);
~template end~
~main class end~
