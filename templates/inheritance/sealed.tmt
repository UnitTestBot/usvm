~class org.owasp.benchmark.helpers.inheritance.SealedSuper start~
package org.owasp.benchmark.helpers.inheritance;
public sealed class SealedSuper permits PermittedSub1, PermittedSub2 {
    public Object sealedMethod(Object obj) {
	    return obj;
    }
}
~class org.owasp.benchmark.helpers.inheritance.SealedSuper end~
~class org.owasp.benchmark.helpers.inheritance.PermittedSub1 start~
package org.owasp.benchmark.helpers.inheritance;
public final class PermittedSub1 extends SealedSuper {
	public Object subMethod1(Object obj) {
	    return obj;
	}
}
~class org.owasp.benchmark.helpers.inheritance.PermittedSub1 end~
~class org.owasp.benchmark.helpers.inheritance.PermittedSub2 start~
package org.owasp.benchmark.helpers.inheritance;
public final class PermittedSub2 extends SealedSuper {
    public Object subMethod2(Object obj) {
	    return obj;
    }
}
~class org.owasp.benchmark.helpers.inheritance.PermittedSub2 end~

~main class start~
~import org.owasp.benchmark.helpers.inheritance.*;~
~import java.util.*;~
~template start~
~function handleSealedSuper start~
public String handleSealedSuper(SealedSuper superClassObj, String param) {
    if (superClassObj instanceof PermittedSub1 permittedSubObj1) {
        return (String) permittedSubObj1.subMethod1(param);
    } else if (superClassObj instanceof PermittedSub2 permittedSubObj2) {
        return (String) permittedSubObj2.subMethod2(param);
    } else if (!(superClassObj instanceof SealedSuper)) {
		return "";
    } else {
		return (String) superClassObj.sealedMethod(param);
    }
}
~function handleSealedSuper end~

SealedSuper obj = new SealedSuper();
String paramModified = handleSealedSuper(obj, ~[EXPR_String@1]~);
if (paramModified.equals(~[EXPR_String@1]~)) {
	~[VAR_String]~ = paramModified;
}
~template end~
~main class end~
